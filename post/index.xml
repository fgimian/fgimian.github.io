<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Fotsies Technology Blog</title>
    <link>https://fgimian.github.io/post/</link>
    <description>Recent content in Posts on Fotsies Technology Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 30 Dec 2018 06:41:36 +1100</lastBuildDate>
    
	<atom:link href="https://fgimian.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Revisiting Go</title>
      <link>https://fgimian.github.io/blog/2018/12/30/revisiting-go/</link>
      <pubDate>Sun, 30 Dec 2018 06:41:36 +1100</pubDate>
      
      <guid>https://fgimian.github.io/blog/2018/12/30/revisiting-go/</guid>
      <description>Several months ago I wrote about Crystal and its potential, but also spoke about why Go was not a language I was interested in.
In my post, I originally stated the following:
 No keyword arguments, no exceptions, no classes, no generics and awful naming styles all led to me saying no to Go (although perhaps this simplicity is what attracts many to it). I have actually spent quite some time learning and coding in Go and found it frustrating at best &amp;hellip; C++ is a far better language!</description>
    </item>
    
    <item>
      <title>Why Crystal Is My Next Language</title>
      <link>https://fgimian.github.io/blog/2018/06/06/why-crystal-is-my-next-language/</link>
      <pubDate>Wed, 06 Jun 2018 17:09:03 +1000</pubDate>
      
      <guid>https://fgimian.github.io/blog/2018/06/06/why-crystal-is-my-next-language/</guid>
      <description>Note: I&amp;rsquo;ve made various corrections and amendments based on various feedback I have received. Thanks everyone! :)
I have been a heavy user and lover of Python since 2011. At that time, when a good friend suggested I ditch Perl (eeek) and try Python instead, an entirely new world opened up to me. A world where readability counted above everything else and an explicit style ruled.
After around 7 years of using Python, I&amp;rsquo;m just as passionate about it now as I was then.</description>
    </item>
    
    <item>
      <title>Python API Framework Benchmarks</title>
      <link>https://fgimian.github.io/blog/2018/06/05/python-api-framework-benchmarks/</link>
      <pubDate>Tue, 05 Jun 2018 21:25:26 +1000</pubDate>
      
      <guid>https://fgimian.github.io/blog/2018/06/05/python-api-framework-benchmarks/</guid>
      <description>With the multitude of awesome Python web frameworks out there today, I thought it would be a fun exercise to perform my own benchmarking against them and several popular WSGI servers.
Disclaimer: I&amp;rsquo;m aware that this test doesn&amp;rsquo;t offer multiple real-life use-cases and may not be a great representation of real-world performance. However, I still thought it would be fun to share the results.
Test Environment Two servers were created in AWS with the following details:</description>
    </item>
    
    <item>
      <title>Selecting a Solid Code Editor in 2018</title>
      <link>https://fgimian.github.io/blog/2018/06/05/selecting-a-solid-code-editor-in-2018/</link>
      <pubDate>Tue, 05 Jun 2018 21:00:16 +1000</pubDate>
      
      <guid>https://fgimian.github.io/blog/2018/06/05/selecting-a-solid-code-editor-in-2018/</guid>
      <description>Hey there everyone, I thought it would be a good time to do a follow-up to my earlier post about code editors. The landscape has changed significantly since the last post, almost frighteningly so.
I&amp;rsquo;ll be evaluating the current versions of GitHub&amp;rsquo;s Atom, Microsoft&amp;rsquo;s Visual Studio Code and JetBrains&amp;rsquo; IDEs against Sublime Text.
During this evaluation, I did focus mostly on Python development (i.e. the PyCharm IDE from JetBrains).</description>
    </item>
    
    <item>
      <title>Choosing a Fast Python API Framework</title>
      <link>https://fgimian.github.io/blog/2018/05/17/choosing-a-fast-python-api-framework/</link>
      <pubDate>Thu, 17 May 2018 10:15:39 +1000</pubDate>
      
      <guid>https://fgimian.github.io/blog/2018/05/17/choosing-a-fast-python-api-framework/</guid>
      <description>This post attempts to highlight my thought process in selecting a suitable stack for developing an API in Python for our current project at work.
Although I have personally benchmarked various combinations, I haven&amp;rsquo;t documented the results for this article, instead merely mentioned which frameworks and WSGI servers were found to be fast or slow.
All tests I performed (after choosing the fastest WSGI server) were done as follows:</description>
    </item>
    
    <item>
      <title>How macOS Stores Launchpad Configuration</title>
      <link>https://fgimian.github.io/blog/2016/12/23/how-macos-stores-launchpad-configuration/</link>
      <pubDate>Fri, 23 Dec 2016 13:52:54 +1100</pubDate>
      
      <guid>https://fgimian.github.io/blog/2016/12/23/how-macos-stores-launchpad-configuration/</guid>
      <description>Launchpad in macOS is definitely one of the most cumbersome apps to setup, although it can be pretty nice to have setup as it provides a little more organisation than adding your Applications folder to the Dock.
The problem up until this point was understanding how it works so that we can build automation tools around it. However, this changes today as we explore the way Launchpad works under tho hood :)</description>
    </item>
    
    <item>
      <title>What Does High Resolution Audio Really Mean?</title>
      <link>https://fgimian.github.io/blog/2016/06/13/what-does-high-resolution-audio-really-mean/</link>
      <pubDate>Mon, 13 Jun 2016 11:00:38 +1000</pubDate>
      
      <guid>https://fgimian.github.io/blog/2016/06/13/what-does-high-resolution-audio-really-mean/</guid>
      <description>There&amp;rsquo;s a lot of misinformation out there right now relating to so-called high resolution audio. Many large companies are now marketing audio products with this term, including audio systems, phones, headphones and speakers.
But what is high resolution audio exactly? Is it audio that&amp;rsquo;s provided at a higher sample rate or bit depth than audio CDs? Is it a particular frequency balance on headphones? Is it to do with how the audio was recorded and mastered?</description>
    </item>
    
    <item>
      <title>Building Web Assets Using Shell Scripts</title>
      <link>https://fgimian.github.io/blog/2016/04/03/building-web-assets-using-shell-scripts/</link>
      <pubDate>Sun, 03 Apr 2016 19:21:21 +1000</pubDate>
      
      <guid>https://fgimian.github.io/blog/2016/04/03/building-web-assets-using-shell-scripts/</guid>
      <description>With the various pre-processed languages used for web (e.g. Coffeescript, LESS .etc), we often reach for tools like Gulp, Grunt and Brunch. However, what if we could just strip it back to basics and use a shell script? This could potentially save you the entire Node.js stack if you only plan to use SCSS (via LibSass).
Firstly, we&amp;rsquo;re going to need to run both our development server (for the respective framework) and one or more other commands to watch and pre-process files.</description>
    </item>
    
    <item>
      <title>Installing Windows 10 on a Mac without Bootcamp</title>
      <link>https://fgimian.github.io/blog/2016/03/12/installing-windows-10-on-a-mac-without-bootcamp/</link>
      <pubDate>Sat, 12 Mar 2016 18:34:00 +1100</pubDate>
      
      <guid>https://fgimian.github.io/blog/2016/03/12/installing-windows-10-on-a-mac-without-bootcamp/</guid>
      <description>Installing Windows on a Mac should be a piece of cake with Bootcamp, but that rarely is the case. In fact, I would personally say that Boot Camp Assistant is one of the worst apps that comes with OS X and unlike the rest, it doesn&amp;rsquo;t work seamlessly.
A few of its drawbacks:
 It only supports a drive with a single partition. It often throws very obscure error messages with limited detail.</description>
    </item>
    
    <item>
      <title>The Battle of Popular Music Streaming Services</title>
      <link>https://fgimian.github.io/blog/2015/07/04/the-battle-of-popular-music-streaming-services/</link>
      <pubDate>Sat, 04 Jul 2015 15:17:00 +1000</pubDate>
      
      <guid>https://fgimian.github.io/blog/2015/07/04/the-battle-of-popular-music-streaming-services/</guid>
      <description>Streaming music services are very mainstream now and really a great step forward in allowing us all to have exposure to an infinite amount of material that ultimately allows us to discover and enjoy more music.
With Apple Music being released just the other day, I wanted to throw my 2 cents in about the main players, Google Play Music All Access (such a long name), Spotify and Apple Music.</description>
    </item>
    
    <item>
      <title>A Simple PlistBuddy Tutorial</title>
      <link>https://fgimian.github.io/blog/2015/06/27/a-simple-plistbuddy-tutorial/</link>
      <pubDate>Sat, 27 Jun 2015 20:41:00 +1000</pubDate>
      
      <guid>https://fgimian.github.io/blog/2015/06/27/a-simple-plistbuddy-tutorial/</guid>
      <description>Good ol&amp;rsquo; plist files. They are at the core of OS X for storing application settings and they work really well.
If you have ever automated part of your OS X build or changed some cool hidden feature, you have probably used the defaults command to do so. The defaults command is great and is still recommended for simple things, but if you want to edit complex plist structures like arrays, dicts and nested structures, you&amp;rsquo;ll inevitably come across PlistBuddy.</description>
    </item>
    
    <item>
      <title>Selecting a Solid Code Editor</title>
      <link>https://fgimian.github.io/blog/2015/06/06/selecting-a-solid-code-editor/</link>
      <pubDate>Sat, 06 Jun 2015 20:09:00 +1000</pubDate>
      
      <guid>https://fgimian.github.io/blog/2015/06/06/selecting-a-solid-code-editor/</guid>
      <description>Hello guys, hope everyone is doing well. I&amp;rsquo;ll start this post by admitting that I absolutely love Sublime Text and already own a license for it. But, I&amp;rsquo;m a curious lad who likes to try new things and therefore I couldn&amp;rsquo;t help being interested in trying out the slew of new open source and also payware editors which are popping up.
As you also can tell, I primarily develop in Python but do a lot of frontend work too, so CSS and Javascript are of interest.</description>
    </item>
    
    <item>
      <title>Running nose tests with plugins using the setuptools test command</title>
      <link>https://fgimian.github.io/blog/2014/04/27/running-nose-tests-with-plugins-using-the-setuptools-test-command/</link>
      <pubDate>Sun, 27 Apr 2014 11:28:00 +1000</pubDate>
      
      <guid>https://fgimian.github.io/blog/2014/04/27/running-nose-tests-with-plugins-using-the-setuptools-test-command/</guid>
      <description>The nose Python test framework is a really good choice for writing and running your tests. However, it seems that the author is deprecating the use of nose.collector which was used when running the test setuptools command:
1python setup.py test   Furthermore, even in its current form, the nose collector doesn&amp;rsquo;t correctly work with plugins such as coverage.py.
The recommended way is to use the nosetests setuptools command instead. Though, this presents several problems:</description>
    </item>
    
    <item>
      <title>Better Python version and environment management with pyenv</title>
      <link>https://fgimian.github.io/blog/2014/04/20/better-python-version-and-environment-management-with-pyenv/</link>
      <pubDate>Sun, 20 Apr 2014 09:27:00 +1000</pubDate>
      
      <guid>https://fgimian.github.io/blog/2014/04/20/better-python-version-and-environment-management-with-pyenv/</guid>
      <description>In the Setting up Virtual Development Environments for Python post, we discussed the use of pythonbrew for managing Python versions and their related virtualenvs. If you do enjoy pythonbrew, then be sure to check out pythonz which is now the active fork of the original project and has resolved almost all issues that I had originally reported.
However, there is another alternative called pyenv which has several significant advantages. Probably one of the biggest is the fact that pyenv doesn&amp;rsquo;t depend on Python 2.</description>
    </item>
    
    <item>
      <title>Using the Python mock library to fake regular functions during tests</title>
      <link>https://fgimian.github.io/blog/2014/04/10/using-the-python-mock-library-to-fake-regular-functions-during-tests/</link>
      <pubDate>Thu, 10 Apr 2014 19:00:00 +1000</pubDate>
      
      <guid>https://fgimian.github.io/blog/2014/04/10/using-the-python-mock-library-to-fake-regular-functions-during-tests/</guid>
      <description>While writing unit tests in Python, there will often be times where you&amp;rsquo;ll need to fake the result of a function as testing against the actual function may be impossible. A simple example is a random function since one can&amp;rsquo;t predict what it will return. Another could be a database call for a database that&amp;rsquo;s only available in certain environments.
Python&amp;rsquo;s mock library is the de facto standard when mocking functions in Python, yet I have always struggled to understand it from the official documentation.</description>
    </item>
    
    <item>
      <title>Headless Browser Testing with Chrome and Firefox</title>
      <link>https://fgimian.github.io/blog/2014/04/06/headless-browser-testing-with-chrome-and-firefox/</link>
      <pubDate>Sun, 06 Apr 2014 21:38:00 +1000</pubDate>
      
      <guid>https://fgimian.github.io/blog/2014/04/06/headless-browser-testing-with-chrome-and-firefox/</guid>
      <description>When utilising Selenium to test web applications, I was always under the impression that PhantomJS was the only option for servers without an X server. I have nothing but good things to say about PhantomJS and have used it successfully for testing in the past. However, while working on some pull requests for splinter recently, I discovered that Chrome and Firefox can also be configured to do the same thing.</description>
    </item>
    
    <item>
      <title>Essential Python Libraries</title>
      <link>https://fgimian.github.io/blog/2014/03/04/essential-python-libraries/</link>
      <pubDate>Tue, 04 Mar 2014 21:11:00 +1100</pubDate>
      
      <guid>https://fgimian.github.io/blog/2014/03/04/essential-python-libraries/</guid>
      <description>So in case you haven&amp;rsquo;t noticed &amp;hellip; I&amp;rsquo;m a little (VERY) in love with Python as a programming language. I use it for everything now, from web development, to scripting and everything in between.
As such, I thought I&amp;rsquo;d put together an article of the many amazing libraries that I think every Python programmer needs to know about. Now there&amp;rsquo;s no doubt in my mind that there are heaps that I&amp;rsquo;ve missed, but we have to start somewhere.</description>
    </item>
    
    <item>
      <title>Serving a Python Flask Website on Hostmonster</title>
      <link>https://fgimian.github.io/blog/2014/02/14/serving-a-python-flask-website-on-hostmonster/</link>
      <pubDate>Fri, 14 Feb 2014 19:40:00 +1100</pubDate>
      
      <guid>https://fgimian.github.io/blog/2014/02/14/serving-a-python-flask-website-on-hostmonster/</guid>
      <description>Hey there folks, it&amp;rsquo;s been a while!
In this post, I&amp;rsquo;ll be guiding you through setting up Hostmonster (or similar shared hosting providers) to serve a Python Flask web application. I&amp;rsquo;ll be using my new Flaskage template project as the application, but naturally you can adapt this solution to work with any Flask application.
We&amp;rsquo;ll create a temporary build directory to put things in:
1 2mkdir ~/build cd ~/build   First, start by building and installing Python on the system:</description>
    </item>
    
    <item>
      <title>Building an RPM of the Latest OpenSSH on SLES 10 SP3</title>
      <link>https://fgimian.github.io/blog/2013/05/12/building-an-rpm-of-the-latest-openssh-on-sles-10-sp3/</link>
      <pubDate>Sun, 12 May 2013 08:45:00 +1000</pubDate>
      
      <guid>https://fgimian.github.io/blog/2013/05/12/building-an-rpm-of-the-latest-openssh-on-sles-10-sp3/</guid>
      <description>Several years ago, we needed a newer version of OpenSSH on a system we were building with SLES 10 to enable jailrooting of user accounts. In this post, we&amp;rsquo;re going to be building an RPM of the latest OpenSSH for SLES 10 SP3 (and similar) servers.
Install the required packages to build OpenSSH as follows:
1 2sudo zypper -n install gcc sudo zypper -n install tcpd-devel zlib-devel openssl-devel pam-devel   Grab the current OpenSSH source:</description>
    </item>
    
    <item>
      <title>Building Git on SLES 10 SP3</title>
      <link>https://fgimian.github.io/blog/2013/05/12/building-git-on-sles-10-sp3/</link>
      <pubDate>Sun, 12 May 2013 06:31:00 +1000</pubDate>
      
      <guid>https://fgimian.github.io/blog/2013/05/12/building-git-on-sles-10-sp3/</guid>
      <description>Let&amp;rsquo;s keep the builds going shall we? This is the last one for today though :) This time, we&amp;rsquo;re going to build the latest version of essential tool Git on SLES 10.
Important: In order for the steps to work below, you must build and install Python 2.7 as per my earlier post.
Build Git as follows (ensuring that you explicitly set the Python path with the configure command):
1 2 3 4 5 6 7 8wget https://git-core.</description>
    </item>
    
    <item>
      <title>Building Ruby 1.9.3 and 2.0.0 with RVM and Rails on SLES 10 SP3</title>
      <link>https://fgimian.github.io/blog/2013/05/12/building-ruby-1.9.3-and-2.0.0-with-rvm-and-rails-on-sles-10-sp3/</link>
      <pubDate>Sun, 12 May 2013 06:18:00 +1000</pubDate>
      
      <guid>https://fgimian.github.io/blog/2013/05/12/building-ruby-1.9.3-and-2.0.0-with-rvm-and-rails-on-sles-10-sp3/</guid>
      <description>Oh did you say more software builds for SLES 10? Ok then! In this post, we build the much more challenging Ruby 1.9.3 (and the latest 2.0.0) with RVM and then we install Rails. Ruby was particularly troublesome, but the procedure below should get you through unscathed.
First, install the Ruby build dependencies provided by SLES:
1 2 3 4sudo zypper -n install gcc sudo zypper -n install sqlite-devel gdbm-devel zlib-devel openssl-devel ncurses-devel readline-devel sudo zypper -n install tk-devel tcl-devel xorg-x11-devel sudo zypper -n install bison   Build bash 4.</description>
    </item>
    
    <item>
      <title>Building Python 2.7.4 on SLES 10 SP3</title>
      <link>https://fgimian.github.io/blog/2013/05/12/building-python-2.7.4-on-sles-10-sp3/</link>
      <pubDate>Sun, 12 May 2013 06:07:00 +1000</pubDate>
      
      <guid>https://fgimian.github.io/blog/2013/05/12/building-python-2.7.4-on-sles-10-sp3/</guid>
      <description>In this post, we&amp;rsquo;ll be building the latest revision of Python 2.7 on SLES 10 SP3. Please note that this procedure may also work on other versions of SLES and OpenSUSE too.
First, install the Python build dependencies:
1 2 3sudo zypper -n install gcc sudo zypper -n install sqlite-devel gdbm-devel zlib-devel openssl-devel ncurses-devel readline-devel sudo zypper -n install tk-devel tcl-devel xorg-x11-devel   Download and extract Python:
1 2 3wget http://www.</description>
    </item>
    
    <item>
      <title>Curing RSI (Repetitive Strain Injury)</title>
      <link>https://fgimian.github.io/blog/2013/05/12/curing-rsi-repetitive-strain-injury/</link>
      <pubDate>Sun, 12 May 2013 05:58:00 +1000</pubDate>
      
      <guid>https://fgimian.github.io/blog/2013/05/12/curing-rsi-repetitive-strain-injury/</guid>
      <description>Being a computer user all my life was bound to catch up with me, and it did several years ago. One day, I started having constant pain in my wrists, hands and fingers. Having never experienced something like this before, I assumed it would go away, so I continued working as per usual for the next week. Unfortunately the pain did not go away and I was forced to cut down on typing and using my PC.</description>
    </item>
    
    <item>
      <title>Shut Down When Complete with the Transmission Torrent Client</title>
      <link>https://fgimian.github.io/blog/2013/05/12/shut-down-when-complete-with-the-transmission-torrent-client/</link>
      <pubDate>Sun, 12 May 2013 05:33:00 +1000</pubDate>
      
      <guid>https://fgimian.github.io/blog/2013/05/12/shut-down-when-complete-with-the-transmission-torrent-client/</guid>
      <description>Hey guys, I recently got this little missing feature working in Transmission. The following procedure will make your Mac automatically shut down when all downloads complete. Linux will be similar except that the shut down command will differ in the script :)
The following procedure depends on the Transmission API, so be sure turn on the web admin interface under Remote in the Transmission preferences, listening on (default) port 9091.</description>
    </item>
    
    <item>
      <title>Software Selections for both Windows and OSX</title>
      <link>https://fgimian.github.io/blog/2013/02/18/software-selections-for-both-windows-and-osx/</link>
      <pubDate>Mon, 18 Feb 2013 20:29:00 +1100</pubDate>
      
      <guid>https://fgimian.github.io/blog/2013/02/18/software-selections-for-both-windows-and-osx/</guid>
      <description>Hello everyone, I&amp;rsquo;d like to step aside from my usual coding talk for this article and talk about great software for both Windows and Mac.
As you could tell from my earlier posts, I am a Windows user and have always used Microsoft products since DOS 5. Though, I have always had a keen eye on Apple products, OSX and the lovely world of Macs. Unlike most out there, I don&amp;rsquo;t think that Mac vs PC is an argument worth getting into.</description>
    </item>
    
    <item>
      <title>Setting up Samba on a Ubuntu VM for use With Sublime Text on a Windows Host</title>
      <link>https://fgimian.github.io/blog/2013/01/02/setting-up-samba-on-a-ubuntu-vm-for-use-with-sublime-text-on-a-windows-host/</link>
      <pubDate>Wed, 02 Jan 2013 13:04:00 +1100</pubDate>
      
      <guid>https://fgimian.github.io/blog/2013/01/02/setting-up-samba-on-a-ubuntu-vm-for-use-with-sublime-text-on-a-windows-host/</guid>
      <description>Windows is my desktop OS of choice and until now I have used either WinSCP or FlashFXP (amazing FTP client by the way) to edit files remotely on any Ubuntu VMs I connect to.
I recently decided to start using a Samba share instead. In case you&amp;rsquo;re unaware, Samba allows Linux distros to create Windows shares which allow one to directly access the Unix filesystem in Windows.
Installing &amp;amp; Configuring Samba or Your Ubuntu VM To begin, install Samba on your VM:</description>
    </item>
    
    <item>
      <title>Setting up a Rock Solid Python Development Web Server</title>
      <link>https://fgimian.github.io/blog/2012/12/08/setting-up-a-rock-solid-python-development-web-server/</link>
      <pubDate>Sat, 08 Dec 2012 21:54:00 +1100</pubDate>
      
      <guid>https://fgimian.github.io/blog/2012/12/08/setting-up-a-rock-solid-python-development-web-server/</guid>
      <description>So you want to start developing a Python application do ya? Let&amp;rsquo;s assume we are planning to use a smaller framework like Flask which is a framework I&amp;rsquo;m really loving at the moment.
Update (6th of April 2014): In the past, I had found Flask&amp;rsquo;s in-built development server to be a bit unstable which is why I put together this entry but this is no longer the case. As such, I now recommend using the dev server that comes with Flask for development purposes.</description>
    </item>
    
    <item>
      <title>Setting up Virtual Development Environments for Python</title>
      <link>https://fgimian.github.io/blog/2012/12/08/setting-up-virtual-development-environments-for-python/</link>
      <pubDate>Sat, 08 Dec 2012 19:47:00 +1100</pubDate>
      
      <guid>https://fgimian.github.io/blog/2012/12/08/setting-up-virtual-development-environments-for-python/</guid>
      <description>Setting up virtual environments for Python is always a great way to keep your projects and their related Python packages independent.
Virtualenv Virtualenv is the de-facto standard choice for Python environments. It&amp;rsquo;s capable of creating independent Python module groupings which you can switch to and from using commands. Unfortunately, virtualenv does not install and manage multiple versions of Python, but we&amp;rsquo;ll get to a solution for that with pythonbrew later.</description>
    </item>
    
    <item>
      <title>Setting up Virtual Development Environments for Ruby</title>
      <link>https://fgimian.github.io/blog/2012/12/08/setting-up-virtual-development-environments-for-ruby/</link>
      <pubDate>Sat, 08 Dec 2012 19:00:00 +1100</pubDate>
      
      <guid>https://fgimian.github.io/blog/2012/12/08/setting-up-virtual-development-environments-for-ruby/</guid>
      <description>In this article, I&amp;rsquo;ll be going through the creation of virtual Ruby development environments. Using this sort of approach when developing applications allows you to start from a clean state at any time and also have vastly different environments setup for various projects on the same server.
I must say that the brilliant RVM is about as good as it gets when it comes to virtual development environments. RVM can install Ruby for you and contains a very complete virtual environment experience with bash completion and even automatic switching of environments based on the project directory you are in.</description>
    </item>
    
    <item>
      <title>Making Windows 8 Work on Your Desktop</title>
      <link>https://fgimian.github.io/blog/2012/10/21/making-windows-8-work-on-your-desktop/</link>
      <pubDate>Sun, 21 Oct 2012 19:34:00 +1100</pubDate>
      
      <guid>https://fgimian.github.io/blog/2012/10/21/making-windows-8-work-on-your-desktop/</guid>
      <description>Well, it&amp;rsquo;s almost here folks! Windows 8 arrives this Friday and many people are nervous. I was too the first time I used it; in fact, I hated it! But things have changed significantly for me now. I&amp;rsquo;m currently running Windows 8 Pro RTM (via MSDN) as my main OS and couldn&amp;rsquo;t be happier. I&amp;rsquo;d go as far as to say that I couldn&amp;rsquo;t see myself going back to or missing Windows 7 in the future at all.</description>
    </item>
    
    <item>
      <title>Who on Earth are you?</title>
      <link>https://fgimian.github.io/blog/2012/10/18/who-on-earth-are-you/</link>
      <pubDate>Thu, 18 Oct 2012 22:06:00 +1100</pubDate>
      
      <guid>https://fgimian.github.io/blog/2012/10/18/who-on-earth-are-you/</guid>
      <description>Hello there, my name is Fotis but most my friends call me Fots or something more insulting &amp;hellip; but I&amp;rsquo;ll usually respond to just about anything :)
I like computers &amp;hellip; oh who am I kidding, I freaking love them! I think they are probably the meaning of life or something of that magnitude. I mean really, how cool are these things!?!?
Welcome to my blog which is dedicated to technology with a focus on coding, desktop computers and servers with a little tablet thrown in on the odd day.</description>
    </item>
    
  </channel>
</rss>